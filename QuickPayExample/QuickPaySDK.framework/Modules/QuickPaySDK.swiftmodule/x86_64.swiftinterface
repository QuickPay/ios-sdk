// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.2 (swiftlang-1103.0.32.1 clang-1103.0.32.29)
// swift-module-flags: -target x86_64-apple-ios11.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name QuickPaySDK
import Foundation
import PassKit
@_exported import QuickPaySDK
import Swift
import UIKit
import WebKit
public class QPApplePayToken : Swift.Codable {
  final public let paymentData: QuickPaySDK.QPPaymentData
  final public let transactionIdentifier: Swift.String
  final public let paymentMethod: QuickPaySDK.QPApplePayPaymentMethod
  public init(pkPaymentToken: PassKit.PKPaymentToken)
  @objc deinit
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
@_hasMissingDesignatedInitializers public class QPPaymentData : Swift.Codable {
  public var version: Swift.String?
  public var data: Swift.String?
  public var header: QuickPaySDK.QPPaymentHeader?
  public var signature: Swift.String?
  @objc deinit
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
@_hasMissingDesignatedInitializers public class QPPaymentHeader : Swift.Codable {
  public var ephemeralPublicKey: Swift.String?
  public var publicKeyHash: Swift.String?
  public var transactionId: Swift.String?
  @objc deinit
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public class QPApplePayPaymentMethod : Swift.Codable {
  final public let displayName: Swift.String?
  final public let network: Swift.String?
  final public let type: Swift.String?
  public init(pkPaymentMethod: PassKit.PKPaymentMethod)
  @objc deinit
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public class QPBasket : Swift.Codable {
  public var qty: Swift.Int
  public var item_no: Swift.String
  public var item_name: Swift.String
  public var item_price: Swift.Double
  public var vat_rate: Swift.Double
  public init(qty: Swift.Int, item_no: Swift.String, item_name: Swift.String, item_price: Swift.Double, vat_rate: Swift.Double)
  @objc deinit
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
extension URLRequest {
  public var curlString: Swift.String {
    get
  }
}
public class QPShopSystem : Swift.Codable {
  public var name: Swift.String
  public var version: Swift.String
  public init(name: Swift.String, version: Swift.String)
  @objc deinit
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public class QPPayment : Swift.Codable {
  public var id: Swift.Int
  public var merchant_id: Swift.Int
  public var order_id: Swift.String
  public var accepted: Swift.Bool
  public var type: Swift.String
  public var text_on_statement: Swift.String?
  public var currency: Swift.String
  public var state: Swift.String
  public var test_mode: Swift.Bool
  public var created_at: Swift.String
  public var updated_at: Swift.String
  public var balance: Swift.Int
  public var branding_id: Swift.String?
  public var acquirer: Swift.String?
  public var facilitator: Swift.String?
  public var retented_at: Swift.String?
  public var fee: Swift.Int?
  public var subscriptionId: Swift.Int?
  public var deadline_at: Swift.String?
  public var operations: Swift.Array<QuickPaySDK.QPOperation>?
  public var shipping_address: QuickPaySDK.QPAddress?
  public var invoice_address: QuickPaySDK.QPAddress?
  public var basket: Swift.Array<QuickPaySDK.QPBasket>?
  public var shipping: QuickPaySDK.QPShipping?
  public var metadata: QuickPaySDK.QPMetadata?
  public var link: QuickPaySDK.QPPaymentLink?
  @objc deinit
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
@_hasMissingDesignatedInitializers public class QPNin : Swift.Codable {
  public var number: Swift.String?
  public var country_code: Swift.String?
  public var gender: Swift.String?
  @objc deinit
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
@_hasMissingDesignatedInitializers public class QPAuthorizePaymentRequest : QuickPaySDK.QPRequest {
  public init(parameters: QuickPaySDK.QPAuthorizePaymentParams)
  public func sendRequest(success: @escaping (QuickPaySDK.QPPayment) -> Swift.Void, failure: ((Foundation.Data?, Foundation.URLResponse?, Swift.Error?) -> Swift.Void)?)
  @objc deinit
}
public class QPAuthorizePaymentParams : Swift.Codable {
  public var id: Swift.Int
  public var amount: Swift.Int
  public var quickPayCallbackUrl: Swift.String?
  public var synchronized: Swift.Bool?
  public var vat_rate: Swift.Double?
  public var mobile_number: Swift.String?
  public var auto_capture: Swift.Bool?
  public var acquirer: Swift.String?
  public var autofee: Swift.Bool?
  public var customer_ip: Swift.String?
  public var zero_auth: Swift.Bool?
  public var card: QuickPaySDK.QPCard?
  public var nin: QuickPaySDK.QPNin?
  public var person: QuickPaySDK.QPPerson?
  public init(id: Swift.Int, amount: Swift.Int)
  @objc deinit
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public protocol PaymentViewDelegate {
  func didSelectPaymentMethod(_ paymentView: QuickPaySDK.PaymentView, paymentMethod: QuickPaySDK.PaymentView.PaymentMethod)
  func titleForPaymentMethod(_ paymentView: QuickPaySDK.PaymentView, paymentMethod: QuickPaySDK.PaymentView.PaymentMethod) -> Swift.String
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class PaymentView : UIKit.UIView {
  public enum PaymentMethod : Swift.String {
    case applepay
    case paymentcard
    public func defaultTitle() -> Swift.String
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
  }
  public var delegate: QuickPaySDK.PaymentViewDelegate?
  public func getSelectedPaymentOption() -> QuickPaySDK.PaymentView.PaymentMethod?
  @objc override dynamic public var intrinsicContentSize: CoreGraphics.CGSize {
    @objc get
  }
  @objc deinit
}
extension PaymentView : UIKit.UITableViewDelegate, UIKit.UITableViewDataSource {
  @objc dynamic public func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @objc dynamic public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @objc dynamic public func tableView(_ tableView: UIKit.UITableView, heightForRowAt indexPath: Foundation.IndexPath) -> CoreGraphics.CGFloat
  @objc dynamic public func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
}
extension PaymentView : QuickPaySDK.InitializeDelegate {
  public func initializationStarted()
  public func initializationCompleted()
}
public class QPShipping : Swift.Codable {
  public var method: Swift.String?
  public var company: Swift.String?
  public var amount: Swift.Int?
  public var vat_rate: Swift.Double?
  public var tracking_number: Swift.String?
  public var tracking_url: Swift.String?
  public init()
  @objc deinit
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public class QPCreateSubscriptionParameters : Swift.Codable {
  public var order_id: Swift.String
  public var currency: Swift.String
  public var description: Swift.String
  public var branding_id: Swift.Int?
  public var text_on_statement: Swift.String?
  public var basket: Swift.Array<QuickPaySDK.QPBasket>?
  public var shipping: QuickPaySDK.QPShipping?
  public var invoice_address: QuickPaySDK.QPAddress?
  public var shipping_address: QuickPaySDK.QPAddress?
  public var group_ids: [Swift.Int]?
  public var shopsystem: [QuickPaySDK.QPShopSystem]?
  public init(currency: Swift.String, order_id: Swift.String, description: Swift.String)
  @objc deinit
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public class QPOperation : Swift.Codable {
  public var id: Swift.Int
  public var type: Swift.String?
  public var amount: Swift.Int?
  public var pending: Swift.Bool?
  public var qp_status_code: Swift.String?
  public var qp_status_msg: Swift.String?
  public var aq_status_msg: Swift.String?
  public var aqStatusMsg: Swift.String?
  public var data: Swift.Dictionary<Swift.String, Swift.String>?
  public var callback_url: Swift.String?
  public var callback_success: Swift.Bool?
  public var callback_response_code: Swift.Int?
  public var callback_duration: Swift.Int?
  public var acquirer: Swift.String?
  public var callback_at: Swift.String?
  public var created_at: Swift.String?
  @objc deinit
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
@_hasMissingDesignatedInitializers public class QPRequest {
  @objc deinit
}
public struct QPRequestError : Swift.Codable {
  public let message: Swift.String
  public let errors: Swift.Dictionary<Swift.String, Swift.Array<Swift.String>>
  public let error_code: Swift.String
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public class QPCard : Swift.Codable {
  public var number: Swift.String?
  public var expiration: Swift.String?
  public var cvd: Swift.String?
  public var token: Swift.String?
  public var apple_pay_token: QuickPaySDK.QPApplePayToken?
  public var issued_to: Swift.String?
  public var brand: Swift.String?
  public var status: Swift.String?
  public var eci: Swift.String?
  public var xav: Swift.String?
  public var cavv: Swift.String?
  public init()
  convenience public init(applePayToken: PassKit.PKPaymentToken)
  @objc deinit
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
@_hasMissingDesignatedInitializers public class QPPerson : Swift.Codable {
  public var first_name: Swift.String?
  public var last_name: Swift.String?
  public var email: Swift.String?
  @objc deinit
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
@_hasMissingDesignatedInitializers public class QPCreatePaymentLinkRequest : QuickPaySDK.QPRequest {
  public init(parameters: QuickPaySDK.QPCreatePaymentLinkParameters)
  public func sendRequest(success: @escaping (QuickPaySDK.QPPaymentLink) -> Swift.Void, failure: ((Foundation.Data?, Foundation.URLResponse?, Swift.Error?) -> Swift.Void)?)
  @objc deinit
}
public class QPCreatePaymentLinkParameters : Swift.Codable {
  public var id: Swift.Int
  public var amount: Swift.Double
  public var agreement_id: Swift.Int?
  public var language: Swift.String?
  public var continue_url: Swift.String?
  public var cancel_url: Swift.String?
  public var callback_url: Swift.String?
  public var payment_methods: Swift.String?
  public var auto_fee: Swift.Bool?
  public var branding_id: Swift.Int?
  public var google_analytics_tracking_id: Swift.String?
  public var google_analytics_client_id: Swift.String?
  public var acquirer: Swift.String?
  public var deadline: Swift.String?
  public var framed: Swift.Int?
  public var customer_email: Swift.String?
  public var invoice_address_selection: Swift.Bool?
  public var shipping_address_selection: Swift.Bool?
  public var auto_capture: Swift.Int?
  public init(id: Swift.Int, amount: Swift.Double)
  @objc deinit
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
@_hasMissingDesignatedInitializers public class QPCreateSubscriptionRequest : QuickPaySDK.QPRequest {
  public init(parameters: QuickPaySDK.QPCreateSubscriptionParameters)
  public func sendRequest(success: @escaping (QuickPaySDK.QPSubscription) -> Swift.Void, failure: ((Foundation.Data?, Foundation.URLResponse?, Swift.Error?) -> Swift.Void)?)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class QPCreatePaymentRequest : QuickPaySDK.QPRequest {
  public init(parameters: QuickPaySDK.QPCreatePaymentParameters)
  public func sendRequest(success: @escaping (QuickPaySDK.QPPayment) -> Swift.Void, failure: ((Foundation.Data?, Foundation.URLResponse?, Swift.Error?) -> Swift.Void)?)
  @objc deinit
}
public class QPCreatePaymentParameters : Swift.Codable {
  public var currency: Swift.String
  public var order_id: Swift.String
  public var branding_id: Swift.Int?
  public var text_on_statement: Swift.String?
  public var basket: Swift.Array<QuickPaySDK.QPBasket>?
  public var shipping: QuickPaySDK.QPShipping?
  public var invoice_address: QuickPaySDK.QPAddress?
  public var shipping_address: QuickPaySDK.QPAddress?
  public init(currency: Swift.String, order_id: Swift.String)
  @objc deinit
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public enum QuickPayHttpStatusCodes : Swift.Int {
  case ok
  case created
  case accepted
  case badRequest
  case unauthorized
  case paymentRequired
  case forbidden
  case notFound
  case methodNotAllowed
  case notAcceptable
  case conflict
  case internalServerError
  public static func isSuccessCode(statusCode: Swift.Int) -> Swift.Bool
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
public class QPPaymentLink : Swift.Codable {
  public var url: Swift.String
  public init(url: Swift.String)
  @objc deinit
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public protocol QPPaymentWindowControllerDelegate {
  func onPaymentResponse(success: Swift.Bool)
  func onPaymentCancelled()
  func populateLoadingView(loadingView: UIKit.UIView)
  func loadingProgress(estimatedLoadingProgress: Swift.Float)
}
@objc @_hasMissingDesignatedInitializers public class QPPaymentWindowController : UIKit.UIViewController {
  public var delegate: QuickPaySDK.QPPaymentWindowControllerDelegate?
  required public init(paymentUrl: Swift.String)
  convenience public init(paymentUrl: Swift.String, delegate: QuickPaySDK.QPPaymentWindowControllerDelegate)
  convenience public init(paymentUrl: Swift.String, onCancel: @escaping () -> Swift.Void, onResponse: @escaping (Swift.Bool) -> Swift.Void)
  @objc override dynamic public func loadView()
  @objc public func cancel()
  @objc override dynamic public func observeValue(forKeyPath keyPath: Swift.String?, of object: Any?, change: [Foundation.NSKeyValueChangeKey : Any]?, context: Swift.UnsafeMutableRawPointer?)
  @objc deinit
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
}
extension QPPaymentWindowController : WebKit.WKNavigationDelegate {
  @objc dynamic public func webView(_ webView: WebKit.WKWebView, decidePolicyFor navigationAction: WebKit.WKNavigationAction, decisionHandler: @escaping (WebKit.WKNavigationActionPolicy) -> Swift.Void)
  @objc dynamic public func webView(_ webView: WebKit.WKWebView, didFinish navigation: WebKit.WKNavigation!)
  @objc dynamic public func webView(_ webView: WebKit.WKWebView, decidePolicyFor navigationResponse: WebKit.WKNavigationResponse, decisionHandler: @escaping (WebKit.WKNavigationResponsePolicy) -> Swift.Void)
  @objc dynamic public func webView(_ webView: WebKit.WKWebView, didFail navigation: WebKit.WKNavigation!, withError error: Swift.Error)
  @objc dynamic public func webView(_ webView: WebKit.WKWebView, didFailProvisionalNavigation navigation: WebKit.WKNavigation!, withError error: Swift.Error)
}
extension QPPaymentWindowController : WebKit.WKUIDelegate {
  @objc dynamic public func webView(_ webView: WebKit.WKWebView, runJavaScriptConfirmPanelWithMessage message: Swift.String, initiatedByFrame frame: WebKit.WKFrameInfo, completionHandler: @escaping (Swift.Bool) -> Swift.Void)
}
public enum Presentation {
  case present(controller: UIKit.UIViewController, animated: Swift.Bool, completion: (() -> Swift.Void)?)
  case push(navigationController: UIKit.UINavigationController, animated: Swift.Bool)
}
public protocol InitializeDelegate {
  func initializationStarted()
  func initializationCompleted()
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class QuickPay : ObjectiveC.NSObject {
  public static var isApplePayEnabled: Swift.Bool? {
    get
  }
  public static var isInitializing: Swift.Bool {
    get
  }
  public static var logDelegate: QuickPaySDK.LogDelegate?
  public static var initializeDelegate: QuickPaySDK.InitializeDelegate?
  public static func initWith(apiKey: Swift.String)
  public static func fetchAquires()
  public static func openPaymentLink(paymentUrl: Swift.String, onCancel: @escaping () -> Swift.Void, onResponse: @escaping (Swift.Bool) -> Swift.Void, presentation: QuickPaySDK.Presentation)
  @objc deinit
}
extension QuickPay {
  public static func isApplePayAvailableOnDevice() -> Swift.Bool
}
@_inheritsConvenienceInitializers public class QPGetAcquireSettingsClearhausRequest : QuickPaySDK.QPRequest {
  override public init()
  public func sendRequest(success: @escaping (QuickPaySDK.QPClearhausSettings) -> Swift.Void, failure: ((Foundation.Data?, Foundation.URLResponse?, Swift.Error?) -> Swift.Void)?)
  @objc deinit
}
public class QPClearhausSettings : Swift.Codable {
  public var active: Swift.Bool
  public var api_key: Swift.String
  public var apple_pay: Swift.Bool
  public var recurring: Swift.Bool
  public var payout: Swift.Bool
  public var mpi_merchant_id: Swift.String?
  @objc deinit
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public class QPSubscription : Swift.Codable {
  public var id: Swift.Int
  public var merchant_id: Swift.Int
  public var order_id: Swift.String
  public var accepted: Swift.Bool
  public var type: Swift.String
  public var text_on_statement: Swift.String?
  public var currency: Swift.String
  public var state: Swift.String
  public var test_mode: Swift.Bool
  public var created_at: Swift.String
  public var updated_at: Swift.String
  public var branding_id: Swift.String?
  public var acquirer: Swift.String?
  public var facilitator: Swift.String?
  public var retented_at: Swift.String?
  public var description: Swift.String?
  public var group_ids: [Swift.Int]?
  public var deadline_at: Swift.String?
  public var operations: Swift.Array<QuickPaySDK.QPOperation>?
  public var shipping_address: QuickPaySDK.QPAddress?
  public var invoice_address: QuickPaySDK.QPAddress?
  public var basket: Swift.Array<QuickPaySDK.QPBasket>?
  public var shipping: QuickPaySDK.QPShipping?
  public var metadata: QuickPaySDK.QPMetadata?
  public var link: QuickPaySDK.QPPaymentLink?
  @objc deinit
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
@_hasMissingDesignatedInitializers public class QPGetSubscriptionRequest : QuickPaySDK.QPRequest {
  public var id: Swift.Int
  public init(id: Swift.Int)
  public func sendRequest(success: @escaping (QuickPaySDK.QPSubscription) -> Swift.Void, failure: ((Foundation.Data?, Foundation.URLResponse?, Swift.Error?) -> Swift.Void)?)
  @objc deinit
}
@_inheritsConvenienceInitializers public class QPGetAcquireSettingsMobilePayRequest : QuickPaySDK.QPRequest {
  override public init()
  public func sendRequest(success: @escaping (QuickPaySDK.QPMobilePaySettings) -> Swift.Void, failure: ((Foundation.Data?, Foundation.URLResponse?, Swift.Error?) -> Swift.Void)?)
  @objc deinit
}
public class QPMobilePaySettings : Swift.Codable {
  public var active: Swift.Bool
  public var delivery_limited_to: Swift.String?
  @objc deinit
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public struct EncodableValue : Swift.Encodable {
  public var value: Swift.Encodable?
  public func encode(to encoder: Swift.Encoder) throws
}
public protocol LogDelegate {
  func log(_ msg: Any)
}
@_hasMissingDesignatedInitializers public class QPCreatePaymentSessionRequest : QuickPaySDK.QPRequest {
  public init(id: Swift.Int, parameters: QuickPaySDK.QPCreatePaymentSessionParameters)
  public func sendRequest(success: @escaping (QuickPaySDK.QPPayment) -> Swift.Void, failure: ((Foundation.Data?, Foundation.URLResponse?, Swift.Error?) -> Swift.Void)?)
  @objc deinit
}
public class QPCreatePaymentSessionParameters : Swift.Encodable {
  public var amount: Swift.Int
  public var auto_capture: Swift.Bool?
  public var acquirer: Swift.String?
  public var autofee: Swift.Bool?
  public var customer_ip: Swift.String?
  public var person: QuickPaySDK.QPPerson?
  public var extras: Swift.Dictionary<Swift.String, QuickPaySDK.EncodableValue>?
  public init(amount: Swift.Int)
  convenience public init(amount: Swift.Int, mobilePay: QuickPaySDK.MobilePayParameters)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
}
public struct MobilePayParameters : Swift.Encodable {
  public var return_url: Swift.String
  public var language: Swift.String?
  public var shop_logo_url: Swift.String?
  public init(returnUrl: Swift.String, language: Swift.String? = "dk", shopLogoUrl: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
}
public class QPCreateSubscriptionLinkParameters : Swift.Codable {
  public var id: Swift.Int
  public var amount: Swift.Double
  public var agreement_id: Swift.Int?
  public var language: Swift.String?
  public var continue_url: Swift.String?
  public var cancel_url: Swift.String?
  public var callback_url: Swift.String?
  public var payment_methods: Swift.String?
  public var auto_fee: Swift.Bool?
  public var branding_id: Swift.Int?
  public var google_analytics_tracking_id: Swift.String?
  public var google_analytics_client_id: Swift.String?
  public var acquirer: Swift.String?
  public var deadline: Swift.String?
  public var framed: Swift.Int?
  public var customer_email: Swift.String?
  public var invoice_address_selection: Swift.Bool?
  public var shipping_address_selection: Swift.Bool?
  public init(id: Swift.Int, amount: Swift.Double)
  @objc deinit
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public class PrintLogger {
  public init()
  @objc deinit
}
extension PrintLogger : QuickPaySDK.LogDelegate {
  public func log(_ msg: Any)
}
@_hasMissingDesignatedInitializers public class QPCreateSubscriptionLinkRequest : QuickPaySDK.QPRequest {
  public init(parameters: QuickPaySDK.QPCreateSubscriptionLinkParameters)
  public func sendRequest(success: @escaping (QuickPaySDK.QPSubscriptionLink) -> Swift.Void, failure: ((Foundation.Data?, Foundation.URLResponse?, Swift.Error?) -> Swift.Void)?)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class QPMetadata : Swift.Codable {
  public var type: Swift.String?
  public var origin: Swift.String?
  public var brand: Swift.String?
  public var bin: Swift.String?
  public var corporate: Swift.Bool?
  public var last4: Swift.String?
  public var exp_month: Swift.Int?
  public var exp_year: Swift.Int?
  public var country: Swift.String?
  public var is_3d_secure: Swift.Bool?
  public var issued_to: Swift.String?
  public var hash: Swift.String?
  public var number: Swift.String?
  public var customer_ip: Swift.String?
  public var customer_country: Swift.String?
  public var fraud_suspected: Swift.Bool?
  public var fraud_remarks: Swift.Array<Swift.String>?
  public var fraud_reported: Swift.Bool?
  public var fraud_report_description: Swift.String?
  public var fraud_reported_at: Swift.String?
  public var nin_number: Swift.String?
  public var nin_country_code: Swift.String?
  public var nin_gender: Swift.String?
  public var shopsystem_name: Swift.String?
  public var shopsystem_version: Swift.String?
  @objc deinit
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public class QPAddress : Swift.Codable {
  public var name: Swift.String?
  public var att: Swift.String?
  public var street: Swift.String?
  public var city: Swift.String?
  public var zip_code: Swift.String?
  public var region: Swift.String?
  public var country_code: Swift.String?
  public var vat_no: Swift.String?
  public var company_name: Swift.String?
  public var house_number: Swift.String?
  public var house_extension: Swift.String?
  public var phone_number: Swift.String?
  public var mobile_number: Swift.String?
  public var email: Swift.String?
  public init()
  @objc deinit
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
@_hasMissingDesignatedInitializers public class QPGetPaymentRequest : QuickPaySDK.QPRequest {
  public var id: Swift.Int
  public init(id: Swift.Int)
  public func sendRequest(success: @escaping (QuickPaySDK.QPPayment) -> Swift.Void, failure: ((Foundation.Data?, Foundation.URLResponse?, Swift.Error?) -> Swift.Void)?)
  @objc deinit
}
public class QPSubscriptionLink : Swift.Codable {
  public var url: Swift.String
  public init(url: Swift.String)
  @objc deinit
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
extension QuickPaySDK.PaymentView.PaymentMethod : Swift.Equatable {}
extension QuickPaySDK.PaymentView.PaymentMethod : Swift.Hashable {}
extension QuickPaySDK.PaymentView.PaymentMethod : Swift.RawRepresentable {}
extension QuickPaySDK.QuickPayHttpStatusCodes : Swift.Equatable {}
extension QuickPaySDK.QuickPayHttpStatusCodes : Swift.Hashable {}
extension QuickPaySDK.QuickPayHttpStatusCodes : Swift.RawRepresentable {}
